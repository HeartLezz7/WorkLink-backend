// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum userType {
  user
  admin
  system
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  phoneNumber String       @unique
  createdAt   DateTime     @default(now())
  userType    userType     @default(user)
  isVerify    Boolean
  isBanned    Boolean
  userProfile UserProfile?

  @@map("user")
}

model UserProfile {
  id                  Int            @id @default(autoincrement())
  firstName           String
  lastName            String
  profileImage        String
  identifyId          String?
  identifyImage       String?
  birthDate           DateTime?
  address             String?        @db.VarChar(255)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  personalDescription String?        @db.VarChar(255)
  wallet              Decimal        @default(0) @db.Decimal(10, 2)
  user                User           @relation(fields: [userId], references: [id])
  userId              Int            @unique
  creater             ChatRoom[]     @relation("creater")
  dealer              ChatRoom[]     @relation("dealer")
  owner               Work[]         @relation("owner")
  worker              Work[]         @relation("worker")
  showCase            ShowCase[]
  reported            Report[]       @relation("reported")
  reportBy            Report[]       @relation("reportBy")
  Transaction         Transaction[]
  Challenger          Challenger[]
  reviewer            Review[]       @relation("reviewer")
  reviewBy            Review[]       @relation("reviewBy")
  sender              ChatMessages[] @relation("sender")
  receiver            ChatMessages[] @relation("receiver")

  @@map("user_profile")
}

model ShowCase {
  id            Int         @id @default(autoincrement())
  imagePictue   String
  description   String
  userProfileId Int
  userprofile   UserProfile @relation(fields: [userProfileId], references: [id])

  @@map("show_case")
}

model Review {
  id         Int         @id @default(autoincrement())
  rating     Decimal     @db.Decimal(3, 2)
  detail     String?
  createdAt  DateTime    @default(now())
  work       Work        @relation(fields: [workId], references: [id])
  workId     Int
  reviewer   UserProfile @relation("reviewer", fields: [reviewerId], references: [id])
  reviewerId Int
  reviewBy   UserProfile @relation("reviewBy", fields: [reviewById], references: [id])
  reviewById Int

  @@map("review")
}

model WorkCategories {
  id       Int    @id @default(autoincrement())
  category String
  work     Work[]

  @@map("category")
}

model Challenger {
  id            Int         @id @default(autoincrement())
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
  work          Work        @relation(fields: [workId], references: [id])
  workId        Int

  @@map("challenger")
}

enum statusWork {
  create
  adminReview
  makeDeal
  acceptDeal
  onProcess
  requestSuccess
  success
  cancel
}

model Work {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  price       Decimal         @db.Decimal(10, 2)
  addressLat  String
  addressLong String
  createdAt   DateTime        @default(now())
  startDate   DateTime
  endDate     DateTime?
  workImage   String
  statusWork  statusWork
  ownerId     Int
  owner       UserProfile     @relation("owner", fields: [ownerId], references: [id])
  workerId    Int?
  worker      UserProfile?    @relation("worker", fields: [workerId], references: [id])
  categoryId  Int
  category    WorkCategories? @relation(fields: [categoryId], references: [id])
  chatRoom    ChatRoom[]
  Report      Report[]
  Transaction Transaction[]
  Review      Review[]
  Challenger  Challenger[]

  @@map("work")
}

enum chatstatus {
  disable
  available
}

model ChatRoom {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  status      chatstatus     @default(available)
  workId      Int
  work        Work           @relation(fields: [workId], references: [id])
  createrId   Int
  creater     UserProfile    @relation("creater", fields: [createrId], references: [id])
  dealerId    Int
  dealer      UserProfile    @relation("dealer", fields: [dealerId], references: [id])
  ChatMessage ChatMessages[]

  @@map("chat_room")
}

model ChatMessages {
  id         Int         @id @default(autoincrement())
  message    String      @db.VarChar(255)
  createAt   DateTime    @default(now())
  chatRoomId Int
  chatRoom   ChatRoom    @relation(fields: [chatRoomId], references: [id])
  senderId   Int
  sender     UserProfile @relation("sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   UserProfile @relation("receiver", fields: [receiverId], references: [id])

  @@map("chat_messages")
}

model Report {
  id         Int         @id @default(autoincrement())
  detail     String
  createdAt  DateTime    @default(now())
  workId     Int
  work       Work        @relation(fields: [workId], references: [id])
  reportById Int
  reportBy   UserProfile @relation("reportBy", fields: [reportById], references: [id])
  reportedId Int
  reported   UserProfile @relation("reported", fields: [reportedId], references: [id])
}

enum transactionType {
  deposit
  withdraw
  transfer
  recieve
}

enum transactionStatus {
  pending
  approve
  reject
}

model Transaction {
  id            Int               @id @default(autoincrement())
  type          transactionType
  amount        Decimal           @db.Decimal(10, 2)
  slipImage     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        transactionStatus
  userProfile   UserProfile       @relation(fields: [userProfileId], references: [id])
  userProfileId Int
  work          Work              @relation(fields: [workId], references: [id])
  workId        Int
}
