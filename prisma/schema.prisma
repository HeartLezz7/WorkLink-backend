// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum userType {
  user
  admin
  system
}

enum verifyStatus {
  notVerify
  pending
  verify
}

model AuthUser {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  phoneNumber  String       @unique
  createdAt    DateTime     @default(now())
  userType     userType     @default(user)
  verifyStatus verifyStatus @default(notVerify)
  isBanned     Boolean      @default(false)
  userId       Int
  user         User         @relation(fields: [userId], references: [id])

  @@map("auth_user")
}

model User {
  id                  Int            @id @default(autoincrement())
  firstName           String
  lastName            String
  profileImage        String
  identifyId          String?
  identifyImage       String?
  birthDate           DateTime?
  address             String?        @db.VarChar(255)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  personalDescription String?        @db.Text
  wallet              Decimal        @default(0) @db.Decimal(10, 2)
  creater             ChatRoom[]     @relation("creater")
  dealer              ChatRoom[]     @relation("dealer")
  owner               Work[]         @relation("owner")
  worker              Work[]         @relation("worker")
  showCase            ShowCase[]
  reported            Report[]       @relation("reported")
  reportBy            Report[]       @relation("reportBy")
  transaction         Transaction[]
  challenger          Challenger[]
  reviewer            Review[]       @relation("reviewer")
  reviewBy            Review[]       @relation("reviewBy")
  sender              ChatMessages[] @relation("sender")
  receiver            ChatMessages[] @relation("receiver")
  authUser            AuthUser[]

  @@map("user")
}

model ShowCase {
  id           Int    @id @default(autoincrement())
  imagePicture String
  description  String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])

  @@map("show_case")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Decimal  @db.Decimal(3, 2)
  detail     String?
  createdAt  DateTime @default(now())
  work       Work     @relation(fields: [workId], references: [id])
  workId     Int
  reviewer   User     @relation("reviewer", fields: [reviewerId], references: [id])
  reviewerId Int
  reviewBy   User     @relation("reviewBy", fields: [reviewById], references: [id])
  reviewById Int

  @@map("review")
}

model WorkCategories {
  id            Int    @id @default(autoincrement())
  category      String
  categoryImage String
  work          Work[]

  @@map("category")
}

model Challenger {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  work   Work @relation(fields: [workId], references: [id])
  workId Int

  @@map("challenger")
}

enum statusWork {
  adminReview
  finding
  makeDeal
  onProcess
  requestSuccess
  success
  cancel
  onIssue
}

model Work {
  id          Int             @id @default(autoincrement())
  title       String
  description String          @db.Text
  isOnsite    Boolean         @default(false)
  price       Decimal         @db.Decimal(10, 2)
  addressLat  String?
  addressLong String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  startDate   DateTime
  endDate     DateTime?
  workImage   String
  statusWork  statusWork
  ownerId     Int
  owner       User            @relation("owner", fields: [ownerId], references: [id])
  workerId    Int?
  worker      User?           @relation("worker", fields: [workerId], references: [id])
  categoryId  Int
  category    WorkCategories? @relation(fields: [categoryId], references: [id])
  chatRoom    ChatRoom[]
  report      Report[]
  transaction Transaction[]
  review      Review[]
  challenger  Challenger[]

  @@map("work")
}

enum chatstatus {
  disable
  available
}

model ChatRoom {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  status      chatstatus     @default(available)
  workId      Int
  work        Work           @relation(fields: [workId], references: [id])
  createrId   Int
  creater     User           @relation("creater", fields: [createrId], references: [id])
  dealerId    Int
  dealer      User           @relation("dealer", fields: [dealerId], references: [id])
  chatMessage ChatMessages[]

  @@map("chat_room")
}

model ChatMessages {
  id         Int      @id @default(autoincrement())
  message    String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  senderId   Int
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])

  @@map("chat_messages")
}

model Report {
  id         Int      @id @default(autoincrement())
  detail     String
  createdAt  DateTime @default(now())
  workId     Int
  work       Work     @relation(fields: [workId], references: [id])
  reportById Int
  reportBy   User     @relation("reportBy", fields: [reportById], references: [id])
  reportedId Int
  reported   User     @relation("reported", fields: [reportedId], references: [id])

  @@map("report")
}

enum transactionType {
  deposit
  withdraw
  transfer
  recieve
}

enum transactionStatus {
  pending
  approve
  reject
}

model Transaction {
  id        Int               @id @default(autoincrement())
  type      transactionType
  amount    Decimal           @db.Decimal(10, 2)
  slipImage String?
  comment   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    transactionStatus
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  work      Work?             @relation(fields: [workId], references: [id])
  workId    Int?

  @@map("transaction")
}
